// Problem: Write a Java program to check if a given number is prime.
// Time complexity is O(n) because it has to loop through all the numbers
// Space complexity is O(1) because all the variables take constant space
// We can optimize is using running the loop till square root of n

public class prob2 {

    // Method to check if the number 'n' is prime or not
    public static void checkIfPrime(int n) {
        
        // Prime numbers are greater than 1
        if (n <= 1) {
            System.out.println(n + " is NOT a Prime Number");
            return;  // Exit early if the number is 1 or less
        }
        
        // Loop to check if 'n' has any divisors
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {   // If 'n' is divisible by 'i', it's not prime
                System.out.println(n + " is NOT a Prime Number");
                return;  // Exit early once you know it's not prime
            }
        }
        
        // If no divisors found, it is a prime number
        System.out.println(n + " is a Prime Number");
    }

    // Main method to run the program
    public static void main(String[] args) {
        checkIfPrime(29);  // Test case: prime number
        checkIfPrime(15);  // Test case: not a prime number
    }
}
